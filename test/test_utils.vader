Execute (Get filetype with no option set):
  let g:vim_requester_default_filetype = '42'
  let ft = requester#utils#GetFileType(['{"a": 1}'])

Then (Default filetype is returned):
  AssertEqual '42', ft


Execute (Get filetype for empty lines):
  let g:vim_requester_default_filetype = '42'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType([])

Then (Default filetype is returned):
  AssertEqual '42', ft


Execute (Get filetype for JSON data):
  let g:vim_requester_default_filetype = 'txt'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType(['{"a": 1}'])

Then (JSON filetype is returned):
  AssertEqual 'json', ft


Execute (Get filetype for XML data):
  let g:vim_requester_default_filetype = 'txt'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType(['<?xml version="1.0"?>'])

Then (XML filetype is returned):
  AssertEqual 'xml', ft


Execute (Get filetype for HTML data):
  let g:vim_requester_default_filetype = 'txt'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType(['<!DOCTYPE html>'])

Then (XML filetype is returned):
  AssertEqual 'html', ft


Execute (Get filetype for protobuf data):
  let g:vim_requester_default_filetype = 'txt'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType(['message {'])

Then (pb_text filetype is returned):
  AssertEqual 'pb_text', ft


Execute (Get filetype for unsupported data):
  let g:vim_requester_default_filetype = 'txt'
  let g:vim_requester_auto_filetype = 1
  let ft = requester#utils#GetFileType(['message = "test"'])

Then (Default filetype is returned):
  AssertEqual 'txt', ft


Given (Commented last line):
  # These
  are
  # some commented lines

Execute (FindLastCommentLine):
  let l = requester#utils#FindLastCommentLine()

Then (Last line is returned):
  AssertEqual 3, l


Given (Commented non-last line):
  # These
  # are some commented
  lines

Execute (FindLastCommentLine):
  let l = requester#utils#FindLastCommentLine()

Then (Expected line is returned):
  AssertEqual 2, l


Given (No commented lines):
  no
  commented
  lines

Execute (FindLastCommentLine):
  let l = requester#utils#FindLastCommentLine()

Then (Zero is returned):
  AssertEqual 0, l


Given (Some commented params):
  # comment
  example.com
  # q = 42

Execute (FindLastCommentLine):
  let l = requester#utils#FindLastCommentLine()

Then (Commented params are skipped):
  AssertEqual 1, l


Given (Commented URL):
  www.example.com
  # http://vim.com
  p = 42

Execute (FindLastCommentLine):
  let l = requester#utils#FindLastCommentLine()

Then (Commented URL is skipped):
  AssertEqual 0, l
